// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	models "github.com/bindasov/spaceBattle/models"
	mock "github.com/stretchr/testify/mock"
)

// MovableAdapter is an autogenerated mock type for the MovableAdapter type
type MovableAdapter struct {
	mock.Mock
}

// GetPosition provides a mock function with given fields:
func (_m *MovableAdapter) GetPosition() (*models.Vector, error) {
	ret := _m.Called()

	var r0 *models.Vector
	if rf, ok := ret.Get(0).(func() *models.Vector); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Vector)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetVelocity provides a mock function with given fields:
func (_m *MovableAdapter) GetVelocity() (*models.Vector, error) {
	ret := _m.Called()

	var r0 *models.Vector
	if rf, ok := ret.Get(0).(func() *models.Vector); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Vector)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetPosition provides a mock function with given fields: _a0
func (_m *MovableAdapter) SetPosition(_a0 *models.Vector) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.Vector) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewMovableAdapter interface {
	mock.TestingT
	Cleanup(func())
}

// NewMovableAdapter creates a new instance of MovableAdapter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMovableAdapter(t mockConstructorTestingTNewMovableAdapter) *MovableAdapter {
	mock := &MovableAdapter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
